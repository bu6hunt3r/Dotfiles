prompt_install() {
	echo -n "$1 is not installed. Would you like to install it? (y/n) " >&2
	old_stty_cfg=$(stty -g)
	stty raw -echo
	answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
	stty $old_stty_cfg && echo
	if echo "$answer" | grep -iq "^y" ;then
		# This could def use community support
		if [ -x "$(command -v apt-get)" ]; then
			sudo apt-get install $1 -y

		elif [ -x "$(command -v brew)" ]; then
			brew install $1

		elif [  -x "$(command -v pkg)" ]; then
			sudo pkg install $1

		elif [ -x "$(command -v pacman)" ]; then
			sudo pacman -S $1

		else
			echo "I'm not sure what your package manager is! Please install $1 on your own and run this deploy script again. Tests for package managers are in the deploy script you just ran starting at line 13. Feel free to make a pull request at https://github.com/parth/dotfiles :)" 
		fi 
	fi
}

check_for_software() {
	echo "Checking to see if $1 is installed"
	if ! [ "$(command -v $1)" ]; then
		prompt_install $1
	else
		echo "$1 is installed."
	fi
}

check_default_shell() {
	if [ -z "${SHELL##*zsh*}" ] ;then
			echo "Default shell is zsh."
	else
		echo -n "Default shell is not zsh. Do you want to chsh -s \$(which zsh)? (y/n)"
		old_stty_cfg=$(stty -g)
		stty raw -echo
		answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
		stty $old_stty_cfg && echo
		if echo "$answer" | grep -iq "^y" ;then
			chsh -s $(which zsh)
		else
			echo "Warning: Your configuration won't work properly. If you exec zsh, it'll exec tmux which will exec your default shell which isn't zsh."
		fi
	fi
}

echo "We're going to do the following:"
echo "1. Check to make sure you have zsh, vim, and tmux installed"
echo "2. We'll help you install them if you don't"
echo "3. We're going to check to see if your default shell is zsh"
echo "4. We'll try to change it if it's not" 

echo "Let's get started? (y/n)"
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	echo 
else
	echo "Quitting, nothing was changed."
	exit 0
fi


check_for_software zsh
echo 
check_for_software vim
echo
check_for_software tmux
echo
check_for_software neovim
echo
check_for_software msmtp
echo
check_for_software mutt
echo
check_for_software grc 
echo
check_for_software gdb
echo
check_default_shell
echo
echo -n "Would you like to backup your current dotfiles? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	mv ~/.zshrc ~/.zshrc.old
	mv ~/.tmux.conf ~/.tmux.conf.old
	mv ~/.vimrc ~/.vimrc.old
else
	echo -e "\nNot backing up old dotfiles."
fi

printf "source '$HOME/dotfiles/zsh/zshrc_manager.sh'" > ~/.zshrc
printf "so $HOME/dotfiles/vim/vimrc.vim" > ~/.vimrc
printf "source-file $HOME/dotfiles/tmux/tmux.conf" > ~/.tmux.conf

# Neovim and various Plugins
echo
echo "Cloning Vundle Plugin Manager to ~/.config/nvim"
mkdir -p ~/.config/nvim/bundle
git clone https://github.com/VundleVim/Vundle.vim.git ~/.config/nvim/bundle/Vundle.vim
cp ./nvim/init.vim ~/.config/nvim/init.vim
echo
echo -n "Would you like to install NeoVim Plugins (Vundle) now? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	nvim +PluginInstall	
else
	echo -e "\nNot installing nvim Plugins."
fi

# Mutt configuration
echo
echo -n "Would you like to set reset SMTP/IMAP passwords for mail accounts now? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	echo "Setting msmtp/IMAP passwords within python keyring for webde"
	python -m keyring set msmtp webde
	echo "Setting msmtp/IMAP passwords within python keyring for google"
	python -m keyring set msmtp gmail	
else
	echo -e "\nNot changing anything regarding mail passwords."
fi

cd ./mutt
./mutt-compile-colors.sh
cd ..
echo "Copying mutt config files to HOME dir and changing perms"
cp -R ./mutt/.muttrc ./mutt/.mutt "${HOME}"
chmod -R 700 "${HOME}"/.mutt 
chmod 700 "${HOME}"/.muttrc
echo "Setting mutt colors"
sed -i -e  "1s;^;source ${HOME}/dotfiles/mutt/mutt-colors-solarized-dark-16.muttrc\n;" ~/.muttrc

# grc / alias configuration
echo
echo -n "Would you like to reinstall grc aliases now? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	echo "Updating /etc/grc.conf"
	sudo cp "${PWD}"/grc/grc.conf /etc/grc.conf
	echo "Copying conf files to /usr/share/grc"
	sudo cp "${PWD}/grc/configs/conf.*" /usr/share/grc/
	echo "Setting up aliases"
	cp "${PWD}/grc/.aliases.zsh" "${HOME}"
	echo "Now source aliases.zsh within that repo in zshrc"
else
	echo "Not updating anything regarding grc config"
fi

#Radare2 / rc-file
echo
echo "If you have already radare2 installed you have the option to install plugins now"
echo -n "Would you like to install r2 plugins now? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	r2pm init 
	r2pm update
	r2pm -i r2wiki
else
	echo "Nothing changed regarding r2 rc-file"
fi

#GDB / init-file
echo
echo -n "Would you like to install gdb and python addons now? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	git clone https://github.com/longld/peda.git ~/peda
	git clone https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb
	git clone https://github.com/pwndbg/pwndbg.git ~/pwndbg
	cp ./gdb/.gdbinit ~/.gdbinit
else
	echo "Nothing changed regarding gdb addons"
fi

#installing cheats
echo
echo -n "Would you like to install cli cheats? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	git clone --single-branch -b devel https://github.com/bu6hunt3r/cheat.git ~/cheat	
	cd ~/cheat
	sudo -H python setup.py install
	cd "${HOME}/dotfiles"
else
	echo "Nothing changed regarding cheats"
fi

#Installing dict.cc.py
echo
echo -n "Would you like to install dict.cc.py? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	sudo -H pip install dict.cc.py
else
	echo "Nothing changed regarding dict.cc.py"
fi

echo
echo "Please log out and log back in for default shell to be initialized."
