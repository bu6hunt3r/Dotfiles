* Lexical binding
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src
* Set username and mail address

#+begin_src emacs-lisp
(let ((default-directory "~/.doom.d/"))
  (setq private-config-file
        (expand-file-name "private.el.gpg"))
  (epa-decrypt-file private-config-file "private.el")
  (load-file "private.el")
  (delete-file "private.el"))

(setq user-full-name my/username)
(setq user-mail-address my/user-mail-address)
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;;(setq user-full-name "Felix Koch"
;;      user-mail-address "Felix1Koch@gmail.com")
#+end_src

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

* Set org directory

#+begin_src emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src
* Enable line numbering

#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

* Set font and theme

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "3270Medium Nerd Font Mono" :size 18)
      doom-variable-pitch-font (font-spec :family "3270Medium Nerd Font Mono" :size 18)
      )

(setq doom-theme 'doom-outrun-electric)

;;(load-theme 'tron-legacy t)

(custom-set-faces
  '(default ((t (:background "#0a0f14")))))

;; (custom-set-faces!
;;   '(doom-modeline-buffer-modified :foreground "blue"))

(setq doom-neotree-enable-variable-pitch nil)

(nyan-mode +1)
#+end_src

* Rust racer settings

#+begin_src emacs-lisp
(setq racer-rust-src-path "~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src")
#+end_src

* Set org-agenda path

#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/org/brain/todo.org")))
#+end_src

* Org-roam settings

#+begin_src emacs-lisp
(setq org-roam-directory "/tmp/brain")
(require 'company-org-roam)
(use-package company-org-roam
  :when (featurep! :completion company)
  :after org-roam
  :config
  (set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))
#+end_src

* Org capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("r" "reply" entry (file+headline "~/org/brain/todo.org" "Mails to reply to")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
#+end_src
* highlight-indent-guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode))

(after! highlight-indent-guides
  (setq highlight-indent-guides-method 'character))


(after! highlight-indent-guides
  (setq highlight-indent-guides-responsive t))

(after! highlight-indent-guides
  (setq highlight-indent-guides-character ?\‚îÜ))

(after! highlight-indent-guides
  (setq highlight-indent-guides-auto-enabled 'top)
  (set-face-attribute 'highlight-indent-guides-odd-face nil :inherit 'highlight-indentation-odd-face)
  (set-face-attribute 'highlight-indent-guides-even-face nil :inherit 'highlight-indentation-even-face)
  (set-face-foreground 'highlight-indent-guides-character-face (doom-color 'base5)))
#+end_src

* Scratch buffer

Make scratchbuffer inherit the major mode of current buffer
#+begin_src emacs-lisp
(setq doom-scratch-buffer-major-mode t)
#+end_src

* mu4e icons
#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-headers-has-child-prefix '("+" . "‚óº")
        mu4e-headers-empty-parent-prefix '("-" ."‚óΩ")
        mu4e-headers-first-child-prefix '("\\" . "‚Ü≥")
        mu4e-headers-duplicate-prefix '("=" . "‚öå")
        mu4e-headers-default-prefix '("|" . "‚îÉ")
        mu4e-headers-draft-mark '("D" . "üìù ")
        mu4e-headers-flagged-mark '("F" . "üè¥ ")
        mu4e-headers-new-mark '("N" . "‚òÖ ")
        mu4e-headers-passed-mark '("P" . "‚Üí ")
        mu4e-headers-replied-mark '("R" . "‚Üê ")
        mu4e-headers-seen-mark '("S" . "‚úì ")
        mu4e-headers-trashed-mark '("T" . "‚úó ")
        mu4e-headers-attach-mark '("a" . "üìé ")
        mu4e-headers-encrypted-mark '("x" . "üîê ")
        mu4e-headers-signed-mark '("s" . "üîè ")
        mu4e-headers-unread-mark '("u" . "‚úâ ")))
#+end_src

* hideshow
#+begin_src emacs-lisp
(setq hs-special-modes-alist
      (append
           '((prog-mode "{{{" "}}}" "\"")
             (yaml-mode "\\s-*\\_<\\(?:[^:]+\\)\\_>"
                        ""
                        "#"
                        +hideshow-forward-block-by-indent nil)
             (ruby-mode "class\\|d\\(?:ef\\|o\\)\\|module\\|[[{]"
                        "end\\|[]}]"
                        "#\\|=begin"
                        ruby-forward-sexp)
             (enh-ruby-mode "class\\|d\\(?:ef\\|o\\)\\|module\\|[[{]"
                            "end\\|[]}]"
                            "#\\|=begin"
                            enh-ruby-forward-sexp nil))
           hs-special-modes-alist
           '((t))))
#+end_src
* ui/dashboard
#+begin_src emacs-lisp
(setq +doom-dashboard-banner-file (expand-file-name "banners/doom.png" doom-private-dir))
#+end_src

* ui/modeline
#+begin_src emacs-lisp
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-github t)
#+end_src
